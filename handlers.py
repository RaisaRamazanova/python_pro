from typing import Any
from database import get_question, good_stickers_id_list
from interactor import *


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    initialize_states(update, context)
    await show_start_screen(update, context)

    global global_state
    global_state = context.user_data['global']

    global junior_state
    junior_state = context.user_data['junior']


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    code = update.callback_query.data

    try:
        int_code = int(code)
        await handle_training_process(int_code, context)
    except ValueError:
        if code == '–ù–æ–≤–∏—á–æ–∫ (Junior)':
            await handle_level_change(update, context, code)
            await start_junior(context)
        elif code in ['–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (Middle) üîí', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å (Senior) üîí']:
            await pay_screen(update, context)
        elif code == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É':
            update_junior_context(context)
            global junior_state
            junior_state = context.user_data['junior']
            await show_start_screen(update, context)
        elif code == '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è':
            await show_start_screen(update, context)
        elif code == '–ö—É–ø–∏—Ç—å üí∞':
            context.user_data['global']['access'] = True
            await show_start_screen(update, context)
        elif code == '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å' and context.user_data['global']['level'] == '–ù–æ–≤–∏—á–æ–∫ (Junior)':
            await start_junior(context)


async def show_start_screen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    access = context.user_data['global']['access']
    levels = [('–ù–æ–≤–∏—á–æ–∫ (Junior)', '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (Middle)', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å (Senior)'),
              ('–ù–æ–≤–∏—á–æ–∫ (Junior)', '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (Middle) üîí', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å (Senior) üîí')]
    list_of_buttons = levels[0] if access else levels[1]
    keyboard_buttons = await create_buttons(list_of_buttons)
    reply_markup = types.InlineKeyboardMarkup(row_width=1)
    reply_markup.add(*keyboard_buttons)
    text = ("–ü—Ä–∏–≤–µ—Ç!\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é Python "
            "developer\n\n–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ\n")

    try:
        await update.message.reply_text(text, reply_markup=reply_markup.to_json())
    except Exception as e:
        await edit_message(
            chat_id=context.user_data['global']['chat_id'],
            message_id=update.callback_query.message.message_id,
            text=text,
            reply_markup=reply_markup)


async def pay_screen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    list_of_buttons = ['–ö—É–ø–∏—Ç—å üí∞', '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è']
    keyboard_buttons = await create_buttons(list_of_buttons)
    reply_markup = types.InlineKeyboardMarkup(row_width=1)
    reply_markup.add(*keyboard_buttons)

    text = "–≠—Ç–æ –ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å. –ü–æ–∫–∞ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω üîí\n–¢—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –µ–≥–æ üí∞"
    await edit_message(
        chat_id=context.user_data['global']['chat_id'],
        message_id=update.callback_query.message.message_id,
        text=text,
        reply_markup=reply_markup)


async def show_question(question, answer_explanation, explanation_photo_url, list_of_answers: list[tuple[Any, Any]]):
    correct_index = None

    junior_state['explanation'] = answer_explanation
    junior_state['explanation_code'] = explanation_photo_url

    for i, answer in enumerate(list_of_answers):
        if answer[1] == 1:
            correct_index = i
            break

    keyboard_buttons = list(map(lambda button, i: types.InlineKeyboardButton(text=button[0], callback_data=str(i)), list_of_answers,
            range(0, len(list_of_answers))))
    reply_markup = types.InlineKeyboardMarkup(row_width=1)
    reply_markup.add(*keyboard_buttons)

    text = f'*_‚ùì–í–æ–ø—Ä–æ—Å {junior_state['number_of_question']}/4:_*\n\n{question}'
    await send_message(
        chat_id=global_state['chat_id'],
        text=text,
        reply_markup=reply_markup
    )

    junior_state['correct_answer_index'] = correct_index


async def handle_level_change(update, context, level):
    context.user_data['global']['level'] = level
    await edit_message(
        chat_id=context.user_data['global']['chat_id'],
        message_id=update.callback_query.message.message_id,
        text=f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è {context.user_data['global']['level']}"
    )


async def start_junior(context):
    context.user_data['junior']['number_of_question'] += 1
    question_id = get_random_number(context)
    junior_state['selected_id_list'].append(question_id)
    await get_question(question_id)


# TODO: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–æ–¥–µ
async def send_level_completion_message(context: ContextTypes.DEFAULT_TYPE):
    percentage_correct = int((context.user_data['junior']['number_of_correct'] * 100) / 4)
    await send_sticker(
        chat_id=context.user_data['global']['chat_id'],
        sticker=random.choice(good_stickers_id_list)
    )

    reply_markup = await add_jump_button('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É')
    await send_message(
        chat_id=global_state['chat_id'],
        text=f"*–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ 1\-—ã–π —É—Ä–æ–≤–µ–Ω—å\!*\n\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {percentage_correct}\% \({junior_state['number_of_correct']} –∏–∑ 4\)",
        reply_markup=reply_markup
    )


async def handle_training_process(code, context):
    count = len(context.user_data['junior']['selected_id_list'])
    if junior_state['correct_answer_index'] == int(code):
        junior_state['number_of_correct'] += 1
        await send_correct_answer_feedback(global_state['chat_id'], True if count == 4 else False)
    else:
        junior_state['number_of_incorrect'] += 1
        await send_incorrect_answer_feedback(global_state['chat_id'], True if count == 4 else False)


async def send_correct_answer_feedback(chat_id, is_last: bool):
    await send_message(chat_id, f"*‚úÖ –í–µ—Ä–Ω–æ\!\n\n\nüß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ\:*\n\n{junior_state['explanation']}")
    reply_markup = await add_jump_button('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É' if is_last else '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å')
    await send_message(chat_id, junior_state['explanation_code'], reply_markup, parse_mode='HTML')


async def send_incorrect_answer_feedback(chat_id, is_last: bool):
    await send_message(chat_id,f"*‚ùå –ù–µ –≤–µ—Ä–Ω–æ \:\(\n\n\nüß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ\:*\n{junior_state['explanation']}")
    reply_markup = await add_jump_button('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É' if is_last else '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å')
    await send_message(chat_id, junior_state['explanation_code'], reply_markup, parse_mode='HTML')


async def add_jump_button(button_text):
    keyboard_button = types.InlineKeyboardButton(text=button_text, callback_data=button_text)
    reply_markup = types.InlineKeyboardMarkup(row_width=1)
    reply_markup.add(keyboard_button)
    return reply_markup
